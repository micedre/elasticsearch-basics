{
  "hash": "2355aa6c9067fec770fa22c6db61ba73",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"Aggregations\"\nkeep-ipynb: true\n---\n\n## Introduction to Aggregations\n\nAggregations provide analytics and statistics on your data. They enable you to build complex summaries of your data and answer questions like:\n\n- What's the average number of views per blog post?\n- How many posts are there per author?\n- What's the distribution of posts over time?\n\n## Types of Aggregations\n\n1. **Metric Aggregations**: Calculate metrics (sum, avg, min, max, etc.)\n2. **Bucket Aggregations**: Group documents into buckets\n3. **Pipeline Aggregations**: Process outputs from other aggregations\n\n## Metric Aggregations\n\n### Basic Statistics\n\n::: {#9fcb3460 .cell execution_count=1}\n``` {.python .cell-code}\nfrom elasticsearch import Elasticsearch\n\nes = Elasticsearch(['http://localhost:9200'])\n\n# Calculate statistics on views\nquery = {\n    \"aggs\": {\n        \"avg_views\": {\n            \"avg\": {\"field\": \"views\"}\n        },\n        \"max_views\": {\n            \"max\": {\"field\": \"views\"}\n        },\n        \"min_views\": {\n            \"min\": {\"field\": \"views\"}\n        },\n        \"total_views\": {\n            \"sum\": {\"field\": \"views\"}\n        }\n    },\n    \"size\": 0  # Don't return documents, only aggregations\n}\n\nresponse = es.search(index=\"blog_posts\", body=query)\n\naggs = response['aggregations']\nprint(f\"Average views: {aggs['avg_views']['value']:.2f}\")\nprint(f\"Max views: {aggs['max_views']['value']}\")\nprint(f\"Min views: {aggs['min_views']['value']}\")\nprint(f\"Total views: {aggs['total_views']['value']}\")\n```\n:::\n\n\n### Stats Aggregation\n\nGet all basic statistics in one aggregation:\n\n::: {#edfa6935 .cell execution_count=2}\n``` {.python .cell-code}\nquery = {\n    \"aggs\": {\n        \"views_stats\": {\n            \"stats\": {\"field\": \"views\"}\n        }\n    },\n    \"size\": 0\n}\n\nresponse = es.search(index=\"blog_posts\", body=query)\n\nstats = response['aggregations']['views_stats']\nprint(f\"Count: {stats['count']}\")\nprint(f\"Min: {stats['min']}\")\nprint(f\"Max: {stats['max']}\")\nprint(f\"Avg: {stats['avg']:.2f}\")\nprint(f\"Sum: {stats['sum']}\")\n```\n:::\n\n\n### Extended Stats\n\n::: {#da57e15d .cell execution_count=3}\n``` {.python .cell-code}\nquery = {\n    \"aggs\": {\n        \"views_extended_stats\": {\n            \"extended_stats\": {\"field\": \"views\"}\n        }\n    },\n    \"size\": 0\n}\n\nresponse = es.search(index=\"blog_posts\", body=query)\n\nstats = response['aggregations']['views_extended_stats']\nprint(f\"Std deviation: {stats['std_deviation']:.2f}\")\nprint(f\"Variance: {stats['variance']:.2f}\")\nprint(f\"Sum of squares: {stats['sum_of_squares']}\")\n```\n:::\n\n\n### Value Count\n\nCount non-null values:\n\n::: {#48851464 .cell execution_count=4}\n``` {.python .cell-code}\nquery = {\n    \"aggs\": {\n        \"posts_with_tags\": {\n            \"value_count\": {\"field\": \"tags\"}\n        }\n    },\n    \"size\": 0\n}\n\nresponse = es.search(index=\"blog_posts\", body=query)\nprint(f\"Posts with tags: {response['aggregations']['posts_with_tags']['value']}\")\n```\n:::\n\n\n## Bucket Aggregations\n\n### Terms Aggregation\n\nGroup by field values (like SQL GROUP BY):\n\n::: {#835d86f8 .cell execution_count=5}\n``` {.python .cell-code}\n# Group by author\nquery = {\n    \"aggs\": {\n        \"posts_by_author\": {\n            \"terms\": {\n                \"field\": \"author\",\n                \"size\": 10  # Top 10 authors\n            }\n        }\n    },\n    \"size\": 0\n}\n\nresponse = es.search(index=\"blog_posts\", body=query)\n\nfor bucket in response['aggregations']['posts_by_author']['buckets']:\n    print(f\"Author: {bucket['key']}, Posts: {bucket['doc_count']}\")\n```\n:::\n\n\n### Terms with Metrics\n\nCombine bucket and metric aggregations:\n\n::: {#162732eb .cell execution_count=6}\n``` {.python .cell-code}\n# Posts per author with average views\nquery = {\n    \"aggs\": {\n        \"posts_by_author\": {\n            \"terms\": {\n                \"field\": \"author\",\n                \"size\": 10,\n                \"order\": {\"avg_views\": \"desc\"}  # Order by avg views\n            },\n            \"aggs\": {\n                \"avg_views\": {\n                    \"avg\": {\"field\": \"views\"}\n                },\n                \"total_views\": {\n                    \"sum\": {\"field\": \"views\"}\n                }\n            }\n        }\n    },\n    \"size\": 0\n}\n\nresponse = es.search(index=\"blog_posts\", body=query)\n\nfor bucket in response['aggregations']['posts_by_author']['buckets']:\n    print(f\"Author: {bucket['key']}\")\n    print(f\"  Posts: {bucket['doc_count']}\")\n    print(f\"  Avg views: {bucket['avg_views']['value']:.2f}\")\n    print(f\"  Total views: {bucket['total_views']['value']}\")\n    print(\"---\")\n```\n:::\n\n\n### Range Aggregation\n\nGroup documents into ranges:\n\n::: {#6bcadebd .cell execution_count=7}\n``` {.python .cell-code}\n# Group posts by view count ranges\nquery = {\n    \"aggs\": {\n        \"views_ranges\": {\n            \"range\": {\n                \"field\": \"views\",\n                \"ranges\": [\n                    {\"to\": 500, \"key\": \"low\"},\n                    {\"from\": 500, \"to\": 1500, \"key\": \"medium\"},\n                    {\"from\": 1500, \"key\": \"high\"}\n                ]\n            }\n        }\n    },\n    \"size\": 0\n}\n\nresponse = es.search(index=\"blog_posts\", body=query)\n\nfor bucket in response['aggregations']['views_ranges']['buckets']:\n    print(f\"{bucket['key']}: {bucket['doc_count']} posts\")\n```\n:::\n\n\n### Date Histogram\n\nGroup by time intervals:\n\n::: {#6f570ebe .cell execution_count=8}\n``` {.python .cell-code}\n# Posts per month\nquery = {\n    \"aggs\": {\n        \"posts_over_time\": {\n            \"date_histogram\": {\n                \"field\": \"published_date\",\n                \"calendar_interval\": \"month\",\n                \"format\": \"yyyy-MM\"\n            },\n            \"aggs\": {\n                \"total_views\": {\n                    \"sum\": {\"field\": \"views\"}\n                }\n            }\n        }\n    },\n    \"size\": 0\n}\n\nresponse = es.search(index=\"blog_posts\", body=query)\n\nfor bucket in response['aggregations']['posts_over_time']['buckets']:\n    print(f\"Month: {bucket['key_as_string']}\")\n    print(f\"  Posts: {bucket['doc_count']}\")\n    print(f\"  Total views: {bucket['total_views']['value']}\")\n```\n:::\n\n\n### Histogram\n\nGroup numeric values into intervals:\n\n::: {#24c17c68 .cell execution_count=9}\n``` {.python .cell-code}\n# Distribution of views in 500-view intervals\nquery = {\n    \"aggs\": {\n        \"views_distribution\": {\n            \"histogram\": {\n                \"field\": \"views\",\n                \"interval\": 500\n            }\n        }\n    },\n    \"size\": 0\n}\n\nresponse = es.search(index=\"blog_posts\", body=query)\n\nfor bucket in response['aggregations']['views_distribution']['buckets']:\n    print(f\"Views {bucket['key']}-{bucket['key']+500}: {bucket['doc_count']} posts\")\n```\n:::\n\n\n### Filter Aggregation\n\nApply aggregations to a subset of documents:\n\n::: {#111adc30 .cell execution_count=10}\n``` {.python .cell-code}\n# Statistics only for popular posts\nquery = {\n    \"aggs\": {\n        \"popular_posts\": {\n            \"filter\": {\n                \"range\": {\"views\": {\"gte\": 1000}}\n            },\n            \"aggs\": {\n                \"avg_views\": {\n                    \"avg\": {\"field\": \"views\"}\n                }\n            }\n        }\n    },\n    \"size\": 0\n}\n\nresponse = es.search(index=\"blog_posts\", body=query)\n\npopular = response['aggregations']['popular_posts']\nprint(f\"Popular posts count: {popular['doc_count']}\")\nprint(f\"Average views: {popular['avg_views']['value']:.2f}\")\n```\n:::\n\n\n### Filters Aggregation\n\nMultiple named filters:\n\n::: {#80761b40 .cell execution_count=11}\n``` {.python .cell-code}\n# Categorize posts by popularity\nquery = {\n    \"aggs\": {\n        \"post_categories\": {\n            \"filters\": {\n                \"filters\": {\n                    \"low_traffic\": {\"range\": {\"views\": {\"lt\": 500}}},\n                    \"medium_traffic\": {\"range\": {\"views\": {\"gte\": 500, \"lt\": 1500}}},\n                    \"high_traffic\": {\"range\": {\"views\": {\"gte\": 1500}}}\n                }\n            }\n        }\n    },\n    \"size\": 0\n}\n\nresponse = es.search(index=\"blog_posts\", body=query)\n\nfor category, data in response['aggregations']['post_categories']['buckets'].items():\n    print(f\"{category}: {data['doc_count']} posts\")\n```\n:::\n\n\n## Nested Aggregations\n\nCombine multiple levels of aggregations:\n\n::: {#b186300a .cell execution_count=12}\n``` {.python .cell-code}\n# Posts per author, then by tag\nquery = {\n    \"aggs\": {\n        \"authors\": {\n            \"terms\": {\n                \"field\": \"author\",\n                \"size\": 10\n            },\n            \"aggs\": {\n                \"tags\": {\n                    \"terms\": {\n                        \"field\": \"tags\",\n                        \"size\": 5\n                    },\n                    \"aggs\": {\n                        \"avg_views\": {\n                            \"avg\": {\"field\": \"views\"}\n                        }\n                    }\n                }\n            }\n        }\n    },\n    \"size\": 0\n}\n\nresponse = es.search(index=\"blog_posts\", body=query)\n\nfor author_bucket in response['aggregations']['authors']['buckets']:\n    print(f\"\\nAuthor: {author_bucket['key']} ({author_bucket['doc_count']} posts)\")\n\n    for tag_bucket in author_bucket['tags']['buckets']:\n        print(f\"  Tag: {tag_bucket['key']}\")\n        print(f\"    Count: {tag_bucket['doc_count']}\")\n        print(f\"    Avg views: {tag_bucket['avg_views']['value']:.2f}\")\n```\n:::\n\n\n## Pipeline Aggregations\n\nProcess the output of other aggregations:\n\n### Cumulative Sum\n\n::: {#323859fc .cell execution_count=13}\n``` {.python .cell-code}\n# Cumulative views over time\nquery = {\n    \"aggs\": {\n        \"posts_per_month\": {\n            \"date_histogram\": {\n                \"field\": \"published_date\",\n                \"calendar_interval\": \"month\"\n            },\n            \"aggs\": {\n                \"monthly_views\": {\n                    \"sum\": {\"field\": \"views\"}\n                },\n                \"cumulative_views\": {\n                    \"cumulative_sum\": {\n                        \"buckets_path\": \"monthly_views\"\n                    }\n                }\n            }\n        }\n    },\n    \"size\": 0\n}\n\nresponse = es.search(index=\"blog_posts\", body=query)\n\nfor bucket in response['aggregations']['posts_per_month']['buckets']:\n    print(f\"Month: {bucket['key_as_string']}\")\n    print(f\"  Monthly: {bucket['monthly_views']['value']}\")\n    print(f\"  Cumulative: {bucket['cumulative_views']['value']}\")\n```\n:::\n\n\n### Moving Average\n\n::: {#b8c855ed .cell execution_count=14}\n``` {.python .cell-code}\n# Moving average of views\nquery = {\n    \"aggs\": {\n        \"posts_per_month\": {\n            \"date_histogram\": {\n                \"field\": \"published_date\",\n                \"calendar_interval\": \"month\"\n            },\n            \"aggs\": {\n                \"monthly_views\": {\n                    \"sum\": {\"field\": \"views\"}\n                },\n                \"views_moving_avg\": {\n                    \"moving_avg\": {\n                        \"buckets_path\": \"monthly_views\",\n                        \"window\": 3  # 3-month moving average\n                    }\n                }\n            }\n        }\n    },\n    \"size\": 0\n}\n```\n:::\n\n\n### Bucket Sort\n\nSort and limit buckets:\n\n::: {#04e5dd02 .cell execution_count=15}\n``` {.python .cell-code}\n# Top 5 authors by total views\nquery = {\n    \"aggs\": {\n        \"authors\": {\n            \"terms\": {\n                \"field\": \"author\",\n                \"size\": 100  # Get all first\n            },\n            \"aggs\": {\n                \"total_views\": {\n                    \"sum\": {\"field\": \"views\"}\n                },\n                \"top_authors\": {\n                    \"bucket_sort\": {\n                        \"sort\": [{\"total_views\": {\"order\": \"desc\"}}],\n                        \"size\": 5\n                    }\n                }\n            }\n        }\n    },\n    \"size\": 0\n}\n```\n:::\n\n\n## Cardinality\n\nCount unique values:\n\n::: {#0210c9f9 .cell execution_count=16}\n``` {.python .cell-code}\n# Count unique authors and tags\nquery = {\n    \"aggs\": {\n        \"unique_authors\": {\n            \"cardinality\": {\"field\": \"author\"}\n        },\n        \"unique_tags\": {\n            \"cardinality\": {\"field\": \"tags\"}\n        }\n    },\n    \"size\": 0\n}\n\nresponse = es.search(index=\"blog_posts\", body=query)\n\nprint(f\"Unique authors: {response['aggregations']['unique_authors']['value']}\")\nprint(f\"Unique tags: {response['aggregations']['unique_tags']['value']}\")\n```\n:::\n\n\n## Percentiles\n\nCalculate percentile values:\n\n::: {#4a603470 .cell execution_count=17}\n``` {.python .cell-code}\n# View count percentiles\nquery = {\n    \"aggs\": {\n        \"views_percentiles\": {\n            \"percentiles\": {\n                \"field\": \"views\",\n                \"percents\": [25, 50, 75, 95, 99]\n            }\n        }\n    },\n    \"size\": 0\n}\n\nresponse = es.search(index=\"blog_posts\", body=query)\n\npercentiles = response['aggregations']['views_percentiles']['values']\nfor percentile, value in percentiles.items():\n    print(f\"{percentile}th percentile: {value:.2f} views\")\n```\n:::\n\n\n## Practical Examples\n\n### Example 1: Blog Analytics Dashboard\n\n::: {#fff1093f .cell execution_count=18}\n``` {.python .cell-code}\ndef get_blog_analytics():\n    \"\"\"Comprehensive blog analytics\"\"\"\n\n    query = {\n        \"aggs\": {\n            # Overall statistics\n            \"total_views\": {\"sum\": {\"field\": \"views\"}},\n            \"avg_views\": {\"avg\": {\"field\": \"views\"}},\n\n            # Top authors\n            \"top_authors\": {\n                \"terms\": {\n                    \"field\": \"author\",\n                    \"size\": 5,\n                    \"order\": {\"total_views\": \"desc\"}\n                },\n                \"aggs\": {\n                    \"total_views\": {\"sum\": {\"field\": \"views\"}},\n                    \"avg_views\": {\"avg\": {\"field\": \"views\"}}\n                }\n            },\n\n            # Popular tags\n            \"popular_tags\": {\n                \"terms\": {\n                    \"field\": \"tags\",\n                    \"size\": 10\n                },\n                \"aggs\": {\n                    \"avg_views\": {\"avg\": {\"field\": \"views\"}}\n                }\n            },\n\n            # Posts over time\n            \"posts_timeline\": {\n                \"date_histogram\": {\n                    \"field\": \"published_date\",\n                    \"calendar_interval\": \"month\"\n                },\n                \"aggs\": {\n                    \"monthly_views\": {\"sum\": {\"field\": \"views\"}}\n                }\n            },\n\n            # View distribution\n            \"view_ranges\": {\n                \"range\": {\n                    \"field\": \"views\",\n                    \"ranges\": [\n                        {\"to\": 500, \"key\": \"0-500\"},\n                        {\"from\": 500, \"to\": 1000, \"key\": \"500-1000\"},\n                        {\"from\": 1000, \"to\": 2000, \"key\": \"1000-2000\"},\n                        {\"from\": 2000, \"key\": \"2000+\"}\n                    ]\n                }\n            }\n        },\n        \"size\": 0\n    }\n\n    response = es.search(index=\"blog_posts\", body=query)\n    return response['aggregations']\n\n# Get analytics\nanalytics = get_blog_analytics()\n\nprint(\"=== BLOG ANALYTICS ===\\n\")\n\nprint(f\"Total views: {analytics['total_views']['value']:.0f}\")\nprint(f\"Average views: {analytics['avg_views']['value']:.2f}\\n\")\n\nprint(\"Top Authors:\")\nfor bucket in analytics['top_authors']['buckets']:\n    print(f\"  {bucket['key']}: {bucket['doc_count']} posts, \"\n          f\"{bucket['total_views']['value']:.0f} total views\")\n\nprint(\"\\nPopular Tags:\")\nfor bucket in analytics['popular_tags']['buckets'][:5]:\n    print(f\"  {bucket['key']}: {bucket['doc_count']} posts, \"\n          f\"{bucket['avg_views']['value']:.2f} avg views\")\n```\n:::\n\n\n### Example 2: Time-based Analysis with Visualization\n\n::: {#05af79d0 .cell execution_count=19}\n``` {.python .cell-code}\nimport matplotlib.pyplot as plt\nfrom datetime import datetime\n\ndef analyze_posting_trends():\n    \"\"\"Analyze posting trends over time\"\"\"\n\n    query = {\n        \"aggs\": {\n            \"posts_by_month\": {\n                \"date_histogram\": {\n                    \"field\": \"published_date\",\n                    \"calendar_interval\": \"month\",\n                    \"format\": \"yyyy-MM\"\n                },\n                \"aggs\": {\n                    \"total_views\": {\"sum\": {\"field\": \"views\"}},\n                    \"avg_views\": {\"avg\": {\"field\": \"views\"}}\n                }\n            }\n        },\n        \"size\": 0\n    }\n\n    response = es.search(index=\"blog_posts\", body=query)\n\n    # Extract data\n    buckets = response['aggregations']['posts_by_month']['buckets']\n\n    months = [b['key_as_string'] for b in buckets]\n    post_counts = [b['doc_count'] for b in buckets]\n    total_views = [b['total_views']['value'] for b in buckets]\n\n    # Create visualization\n    fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(12, 8))\n\n    # Posts per month\n    ax1.bar(months, post_counts, color='steelblue')\n    ax1.set_xlabel('Month')\n    ax1.set_ylabel('Number of Posts')\n    ax1.set_title('Posts per Month')\n    ax1.tick_params(axis='x', rotation=45)\n\n    # Views per month\n    ax2.plot(months, total_views, marker='o', color='coral', linewidth=2)\n    ax2.set_xlabel('Month')\n    ax2.set_ylabel('Total Views')\n    ax2.set_title('Views per Month')\n    ax2.tick_params(axis='x', rotation=45)\n\n    plt.tight_layout()\n    plt.savefig('blog_trends.png')\n    print(\"Visualization saved as 'blog_trends.png'\")\n\n    return {\n        \"months\": months,\n        \"posts\": post_counts,\n        \"views\": total_views\n    }\n\n# Note: Uncomment to run with actual data\n# analyze_posting_trends()\n```\n:::\n\n\n## Aggregation Best Practices\n\n:::{.callout-tip}\n## Performance Tips\n\n1. **Use `size: 0`** when you only need aggregations, not documents\n2. **Limit bucket sizes** with the `size` parameter in terms aggregations\n3. **Use filters** to reduce the dataset before aggregating\n4. **Cache filter aggregations** by using the filter context\n5. **Consider doc values** - enabled by default for keyword and numeric fields\n:::\n\n### Example: Efficient Aggregation\n\n::: {#78f0a66a .cell execution_count=20}\n``` {.python .cell-code}\n# Good: Focused aggregation with filters\nefficient_query = {\n    \"query\": {\n        \"range\": {\n            \"published_date\": {\"gte\": \"2024-01-01\"}\n        }\n    },\n    \"aggs\": {\n        \"recent_authors\": {\n            \"terms\": {\n                \"field\": \"author\",\n                \"size\": 10  # Limit results\n            }\n        }\n    },\n    \"size\": 0  # No documents needed\n}\n\n# Avoid: Unbounded aggregations\n# \"terms\": {\"field\": \"author\"}  # No size limit\n```\n:::\n\n\n:::{.callout-tip}\n## Next Steps\nCongratulations! You now understand the fundamentals of Elasticsearch. Check out the Advanced Topics section for clustering, optimization, and production best practices.\n:::\n\n---\n\n## Download Notebook\n\n:::{.callout-note}\n## Jupyter Notebook\nDownload this section as an interactive Jupyter notebook to run the examples on your own machine.\n\n[Download aggregations.ipynb](aggregations.ipynb){.btn .btn-primary download=\"aggregations.ipynb\"}\n:::\n\n",
    "supporting": [
      "aggregations_files"
    ],
    "filters": [],
    "includes": {}
  }
}