{
  "hash": "534a9a81bba9d2eca25f8d823a7f55d9",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"Search & Queries\"\nkeep-ipynb: true\n---\n\n## Introduction to Search\n\nElasticsearch provides a powerful Query DSL (Domain Specific Language) for searching and filtering data. Let's explore the different types of queries.\n\n## Basic Search: Match All\n\nThe simplest query returns all documents:\n\n::: {#92d545e9 .cell execution_count=1}\n``` {.python .cell-code}\nfrom elasticsearch import Elasticsearch\n\nes = Elasticsearch(['http://localhost:9200'])\n\n# Search all documents\nquery = {\n    \"query\": {\n        \"match_all\": {}\n    }\n}\n\nresponse = es.search(index=\"blog_posts\", body=query)\n\nprint(f\"Total hits: {response['hits']['total']['value']}\")\nfor hit in response['hits']['hits']:\n    print(f\"ID: {hit['_id']}, Score: {hit['_score']}\")\n    print(f\"Title: {hit['_source']['title']}\")\n```\n:::\n\n\n## Full-Text Search: Match Query\n\nThe `match` query is used for full-text search:\n\n::: {#2e200f78 .cell execution_count=2}\n``` {.python .cell-code}\n# Search for documents containing \"elasticsearch\"\nquery = {\n    \"query\": {\n        \"match\": {\n            \"content\": \"elasticsearch performance\"\n        }\n    }\n}\n\nresponse = es.search(index=\"blog_posts\", body=query)\n\nfor hit in response['hits']['hits']:\n    print(f\"Score: {hit['_score']:.2f}\")\n    print(f\"Title: {hit['_source']['title']}\")\n    print(f\"Content: {hit['_source']['content'][:100]}...\")\n    print(\"---\")\n```\n:::\n\n\n:::{.callout-note}\n## Match Query Behavior\nThe match query analyzes the search text and finds documents containing any of the terms. Documents containing more terms score higher.\n:::\n\n## Multi-Field Search: Multi-Match Query\n\nSearch across multiple fields:\n\n::: {#fe0b7532 .cell execution_count=3}\n``` {.python .cell-code}\n# Search in both title and content\nquery = {\n    \"query\": {\n        \"multi_match\": {\n            \"query\": \"elasticsearch tutorial\",\n            \"fields\": [\"title^2\", \"content\"]  # ^2 boosts title relevance\n        }\n    }\n}\n\nresponse = es.search(index=\"blog_posts\", body=query)\n\nfor hit in response['hits']['hits']:\n    print(f\"Title: {hit['_source']['title']}, Score: {hit['_score']:.2f}\")\n```\n:::\n\n\n### Field Boosting\n\n::: {#c3fd1dd8 .cell execution_count=4}\n``` {.python .cell-code}\n# Boost different fields differently\nquery = {\n    \"query\": {\n        \"multi_match\": {\n            \"query\": \"search optimization\",\n            \"fields\": [\n                \"title^3\",      # Title is most important\n                \"tags^2\",       # Tags are moderately important\n                \"content\"       # Content has default weight\n            ]\n        }\n    }\n}\n```\n:::\n\n\n## Exact Match: Term Query\n\nFor exact matching (useful with keyword fields):\n\n::: {#e0c19535 .cell execution_count=5}\n``` {.python .cell-code}\n# Find documents by exact author name\nquery = {\n    \"query\": {\n        \"term\": {\n            \"author\": \"Jane Smith\"\n        }\n    }\n}\n\nresponse = es.search(index=\"blog_posts\", body=query)\n\nfor hit in response['hits']['hits']:\n    print(f\"Title: {hit['_source']['title']}\")\n    print(f\"Author: {hit['_source']['author']}\")\n```\n:::\n\n\n## Multiple Exact Matches: Terms Query\n\n::: {#db520525 .cell execution_count=6}\n``` {.python .cell-code}\n# Find documents with specific tags\nquery = {\n    \"query\": {\n        \"terms\": {\n            \"tags\": [\"elasticsearch\", \"performance\", \"tutorial\"]\n        }\n    }\n}\n\nresponse = es.search(index=\"blog_posts\", body=query)\n```\n:::\n\n\n## Range Queries\n\nSearch for values within a range:\n\n::: {#30be6dc0 .cell execution_count=7}\n``` {.python .cell-code}\n# Find posts with views between 1000 and 2000\nquery = {\n    \"query\": {\n        \"range\": {\n            \"views\": {\n                \"gte\": 1000,  # Greater than or equal\n                \"lte\": 2000   # Less than or equal\n            }\n        }\n    }\n}\n\nresponse = es.search(index=\"blog_posts\", body=query)\n\nfor hit in response['hits']['hits']:\n    print(f\"Title: {hit['_source']['title']}\")\n    print(f\"Views: {hit['_source']['views']}\")\n```\n:::\n\n\n### Date Range Queries\n\n::: {#8d39833a .cell execution_count=8}\n``` {.python .cell-code}\n# Find posts published in January 2024\nquery = {\n    \"query\": {\n        \"range\": {\n            \"published_date\": {\n                \"gte\": \"2024-01-01\",\n                \"lt\": \"2024-02-01\"\n            }\n        }\n    }\n}\n\n# Using date math\nquery_with_math = {\n    \"query\": {\n        \"range\": {\n            \"published_date\": {\n                \"gte\": \"now-30d/d\",  # Last 30 days\n                \"lte\": \"now/d\"       # Today\n            }\n        }\n    }\n}\n```\n:::\n\n\n## Boolean Queries\n\nCombine multiple queries using Boolean logic:\n\n::: {#ec4ad8ed .cell execution_count=9}\n``` {.python .cell-code}\n# Complex query: must match content, should match tags, must not be by specific author\nquery = {\n    \"query\": {\n        \"bool\": {\n            \"must\": [\n                {\"match\": {\"content\": \"elasticsearch\"}}\n            ],\n            \"should\": [\n                {\"term\": {\"tags\": \"tutorial\"}},\n                {\"term\": {\"tags\": \"beginner\"}}\n            ],\n            \"must_not\": [\n                {\"term\": {\"author\": \"John Doe\"}}\n            ],\n            \"filter\": [\n                {\"range\": {\"views\": {\"gte\": 1000}}}\n            ]\n        }\n    }\n}\n\nresponse = es.search(index=\"blog_posts\", body=query)\n```\n:::\n\n\n### Boolean Query Clauses\n\n| Clause | Description | Affects Score |\n|--------|-------------|---------------|\n| `must` | Documents must match | Yes |\n| `should` | Documents should match (boost) | Yes |\n| `must_not` | Documents must not match | No |\n| `filter` | Documents must match (cached) | No |\n\n:::{.callout-tip}\n## Filter vs Must\nUse `filter` for exact matches and ranges when you don't need relevance scoring. It's faster and cached!\n:::\n\n## Phrase Matching\n\nMatch exact phrases in order:\n\n::: {#c31761b3 .cell execution_count=10}\n``` {.python .cell-code}\n# Find exact phrase\nquery = {\n    \"query\": {\n        \"match_phrase\": {\n            \"content\": \"search engine\"\n        }\n    }\n}\n\n# Allow some words in between (slop)\nquery_with_slop = {\n    \"query\": {\n        \"match_phrase\": {\n            \"content\": {\n                \"query\": \"search engine\",\n                \"slop\": 2  # Allow up to 2 words between terms\n            }\n        }\n    }\n}\n```\n:::\n\n\n## Prefix and Wildcard Queries\n\n::: {#c0fef537 .cell execution_count=11}\n``` {.python .cell-code}\n# Prefix query (terms starting with...)\nprefix_query = {\n    \"query\": {\n        \"prefix\": {\n            \"author\": \"Jane\"\n        }\n    }\n}\n\n# Wildcard query (* matches any sequence, ? matches one character)\nwildcard_query = {\n    \"query\": {\n        \"wildcard\": {\n            \"author\": \"J*n*\"\n        }\n    }\n}\n\n# Warning: Can be slow on large datasets!\n```\n:::\n\n\n## Fuzzy Queries\n\nHandle typos and misspellings:\n\n::: {#8a33bce6 .cell execution_count=12}\n``` {.python .cell-code}\n# Fuzzy search (allows small differences)\nquery = {\n    \"query\": {\n        \"fuzzy\": {\n            \"title\": {\n                \"value\": \"elasticsearh\",  # Typo: missing 'c'\n                \"fuzziness\": \"AUTO\"       # Auto-adjusts based on term length\n            }\n        }\n    }\n}\n\n# Or use fuzzy in match query\nfuzzy_match = {\n    \"query\": {\n        \"match\": {\n            \"title\": {\n                \"query\": \"elasticsearh tutorial\",\n                \"fuzziness\": \"AUTO\"\n            }\n        }\n    }\n}\n```\n:::\n\n\n## Exists Query\n\nFind documents with a specific field:\n\n::: {#23e55f30 .cell execution_count=13}\n``` {.python .cell-code}\n# Find documents that have the 'tags' field\nquery = {\n    \"query\": {\n        \"exists\": {\n            \"field\": \"tags\"\n        }\n    }\n}\n\n# Find documents missing a field (using bool + must_not)\nquery_missing = {\n    \"query\": {\n        \"bool\": {\n            \"must_not\": {\n                \"exists\": {\n                    \"field\": \"tags\"\n                }\n            }\n        }\n    }\n}\n```\n:::\n\n\n## Sorting Results\n\n::: {#e74f8540 .cell execution_count=14}\n``` {.python .cell-code}\n# Sort by views (descending)\nquery = {\n    \"query\": {\"match_all\": {}},\n    \"sort\": [\n        {\"views\": {\"order\": \"desc\"}},\n        {\"_score\": {\"order\": \"desc\"}}  # Then by relevance\n    ]\n}\n\nresponse = es.search(index=\"blog_posts\", body=query)\n\nfor hit in response['hits']['hits']:\n    print(f\"Views: {hit['_source']['views']}, Title: {hit['_source']['title']}\")\n```\n:::\n\n\n## Pagination\n\n::: {#e82890dd .cell execution_count=15}\n``` {.python .cell-code}\n# Get results 10-20\nquery = {\n    \"query\": {\"match_all\": {}},\n    \"from\": 10,  # Skip first 10\n    \"size\": 10   # Return 10 results\n}\n\nresponse = es.search(index=\"blog_posts\", body=query)\n\nprint(f\"Showing results 11-20 of {response['hits']['total']['value']}\")\n```\n:::\n\n\n### Search After (for deep pagination)\n\n::: {#56f24b0c .cell execution_count=16}\n``` {.python .cell-code}\n# First request\nquery = {\n    \"query\": {\"match_all\": {}},\n    \"size\": 10,\n    \"sort\": [\n        {\"published_date\": \"desc\"},\n        {\"_id\": \"desc\"}  # Tiebreaker\n    ]\n}\n\nresponse = es.search(index=\"blog_posts\", body=query)\n\n# Get last hit's sort values\nif response['hits']['hits']:\n    last_sort = response['hits']['hits'][-1]['sort']\n\n    # Next page\n    next_query = {\n        \"query\": {\"match_all\": {}},\n        \"size\": 10,\n        \"sort\": [\n            {\"published_date\": \"desc\"},\n            {\"_id\": \"desc\"}\n        ],\n        \"search_after\": last_sort\n    }\n\n    next_response = es.search(index=\"blog_posts\", body=next_query)\n```\n:::\n\n\n## Highlighting\n\nHighlight matching terms in results:\n\n::: {#97356095 .cell execution_count=17}\n``` {.python .cell-code}\nquery = {\n    \"query\": {\n        \"match\": {\n            \"content\": \"elasticsearch performance\"\n        }\n    },\n    \"highlight\": {\n        \"fields\": {\n            \"content\": {\n                \"fragment_size\": 150,\n                \"number_of_fragments\": 3\n            }\n        },\n        \"pre_tags\": [\"<mark>\"],\n        \"post_tags\": [\"</mark>\"]\n    }\n}\n\nresponse = es.search(index=\"blog_posts\", body=query)\n\nfor hit in response['hits']['hits']:\n    print(f\"Title: {hit['_source']['title']}\")\n    if 'highlight' in hit:\n        for fragment in hit['highlight']['content']:\n            print(f\"  ...{fragment}...\")\n```\n:::\n\n\n## Source Filtering\n\nControl which fields are returned:\n\n::: {#3d2424f4 .cell execution_count=18}\n``` {.python .cell-code}\n# Include only specific fields\nquery = {\n    \"query\": {\"match_all\": {}},\n    \"_source\": [\"title\", \"author\", \"published_date\"]\n}\n\n# Exclude specific fields\nquery_exclude = {\n    \"query\": {\"match_all\": {}},\n    \"_source\": {\n        \"excludes\": [\"content\"]\n    }\n}\n\n# Include and exclude patterns\nquery_patterns = {\n    \"query\": {\"match_all\": {}},\n    \"_source\": {\n        \"includes\": [\"title\", \"author*\"],\n        \"excludes\": [\"*.raw\"]\n    }\n}\n```\n:::\n\n\n## Count API\n\nCount matching documents without retrieving them:\n\n::: {#e08c3628 .cell execution_count=19}\n``` {.python .cell-code}\n# Count documents matching query\nquery = {\n    \"query\": {\n        \"match\": {\n            \"content\": \"elasticsearch\"\n        }\n    }\n}\n\ncount = es.count(index=\"blog_posts\", body=query)\nprint(f\"Matching documents: {count['count']}\")\n```\n:::\n\n\n## Practical Search Examples\n\n### Example 1: Blog Search with Filters\n\n::: {#08bde146 .cell execution_count=20}\n``` {.python .cell-code}\ndef search_blog_posts(keyword, author=None, min_views=None, tags=None):\n    \"\"\"Search blog posts with optional filters\"\"\"\n\n    # Build the query\n    must_clauses = []\n    filter_clauses = []\n\n    # Keyword search\n    if keyword:\n        must_clauses.append({\n            \"multi_match\": {\n                \"query\": keyword,\n                \"fields\": [\"title^2\", \"content\"]\n            }\n        })\n\n    # Author filter\n    if author:\n        filter_clauses.append({\n            \"term\": {\"author\": author}\n        })\n\n    # Minimum views filter\n    if min_views:\n        filter_clauses.append({\n            \"range\": {\"views\": {\"gte\": min_views}}\n        })\n\n    # Tags filter\n    if tags:\n        filter_clauses.append({\n            \"terms\": {\"tags\": tags}\n        })\n\n    query = {\n        \"query\": {\n            \"bool\": {\n                \"must\": must_clauses if must_clauses else [{\"match_all\": {}}],\n                \"filter\": filter_clauses\n            }\n        },\n        \"sort\": [\n            {\"_score\": {\"order\": \"desc\"}},\n            {\"views\": {\"order\": \"desc\"}}\n        ]\n    }\n\n    response = es.search(index=\"blog_posts\", body=query)\n\n    return [\n        {\n            \"title\": hit[\"_source\"][\"title\"],\n            \"author\": hit[\"_source\"][\"author\"],\n            \"views\": hit[\"_source\"][\"views\"],\n            \"score\": hit[\"_score\"]\n        }\n        for hit in response[\"hits\"][\"hits\"]\n    ]\n\n# Example usage\nresults = search_blog_posts(\n    keyword=\"elasticsearch performance\",\n    min_views=1000,\n    tags=[\"tutorial\"]\n)\n\nfor result in results:\n    print(result)\n```\n:::\n\n\n### Example 2: Advanced Search with Boosting\n\n::: {#cc0b104c .cell execution_count=21}\n``` {.python .cell-code}\n# Boost recent documents and popular ones\nquery = {\n    \"query\": {\n        \"function_score\": {\n            \"query\": {\n                \"multi_match\": {\n                    \"query\": \"elasticsearch\",\n                    \"fields\": [\"title\", \"content\"]\n                }\n            },\n            \"functions\": [\n                {\n                    # Boost by views\n                    \"field_value_factor\": {\n                        \"field\": \"views\",\n                        \"modifier\": \"log1p\",\n                        \"factor\": 0.1\n                    }\n                },\n                {\n                    # Boost recent documents\n                    \"gauss\": {\n                        \"published_date\": {\n                            \"origin\": \"now\",\n                            \"scale\": \"30d\",\n                            \"decay\": 0.5\n                        }\n                    }\n                }\n            ],\n            \"score_mode\": \"multiply\",\n            \"boost_mode\": \"multiply\"\n        }\n    }\n}\n\nresponse = es.search(index=\"blog_posts\", body=query)\n```\n:::\n\n\n## Query Performance Tips\n\n1. **Use filters for exact matches** - They're cached and faster\n2. **Limit result size** - Don't fetch more than you need\n3. **Use source filtering** - Only retrieve necessary fields\n4. **Avoid wildcards at the beginning** - `*term` is slow\n5. **Use scroll API for large result sets** - Better than deep pagination\n\n:::{.callout-tip}\n## Next Steps\nNow that you can search effectively, let's learn how to analyze and aggregate data in the next section!\n:::\n\n---\n\n## Download Notebook\n\n:::{.callout-note}\n## Jupyter Notebook\nDownload this section as an interactive Jupyter notebook to run the examples on your own machine.\n\n[Download search.ipynb](search.ipynb){.btn .btn-primary download=\"search.ipynb\"}\n:::\n\n",
    "supporting": [
      "search_files"
    ],
    "filters": [],
    "includes": {}
  }
}