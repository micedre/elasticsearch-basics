{
  "hash": "e0df0e911d43dfa83ede1378276d6f2d",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"Getting Started with Elasticsearch\"\nformat: \n    html: default\n    ipynb: default\n---\n\n## Installation Options\n\nThere are several ways to get Elasticsearch up and running:\n\n### Option 1: Docker (Recommended for Development)\n\nThe easiest way to get started is using Docker:\n\n```bash\n# Pull the Elasticsearch image\ndocker pull docker.elastic.co/elasticsearch/elasticsearch:8.11.0\n\n# Run Elasticsearch\ndocker run -d \\\n  --name elasticsearch \\\n  -p 9200:9200 \\\n  -p 9300:9300 \\\n  -e \"discovery.type=single-node\" \\\n  -e \"xpack.security.enabled=false\" \\\n  docker.elastic.co/elasticsearch/elasticsearch:8.11.0\n```\n\n### Option 2: Elastic Cloud\n\nElastic offers a hosted cloud solution at [cloud.elastic.co](https://cloud.elastic.co) with a free trial.\n\n### Option 3: Local Installation\n\nDownload and install from [elastic.co/downloads/elasticsearch](https://www.elastic.co/downloads/elasticsearch).\n\n:::{.callout-note}\n## Security Note\nFor production environments, always enable security features. The examples here disable security for simplicity.\n:::\n\n## Installing the Python Client\n\nWith our project already set up using `uv`, we have the Elasticsearch client installed. If you need to add it to a new project:\n\n```bash\nuv add elasticsearch\n```\n\n## Connecting to Elasticsearch\n\nLet's verify our connection to Elasticsearch:\n\n::: {#00209ea8 .cell execution_count=1}\n``` {.python .cell-code}\nfrom elasticsearch import Elasticsearch\nimport json\n\n# Create an Elasticsearch client\nes = Elasticsearch(\n    ['http://localhost:9200'],\n    # For Elastic Cloud, use:\n    # cloud_id=\"your-cloud-id\",\n    # api_key=(\"your-api-key-id\", \"your-api-key\")\n)\n\n# Test the connection\nif es.ping():\n    print(\"Connected to Elasticsearch!\")\n\n    # Get cluster info\n    info = es.info()\n    print(f\"Cluster name: {info['cluster_name']}\")\n    print(f\"Version: {info['version']['number']}\")\nelse:\n    print(\"Could not connect to Elasticsearch\")\n```\n:::\n\n\n## Basic Cluster Information\n\nOnce connected, you can retrieve various information about your cluster:\n\n::: {#d731be9c .cell execution_count=2}\n``` {.python .cell-code}\n# Get cluster health\nhealth = es.cluster.health()\nprint(f\"Cluster status: {health['status']}\")\nprint(f\"Number of nodes: {health['number_of_nodes']}\")\nprint(f\"Number of data nodes: {health['number_of_data_nodes']}\")\n\n# Get cluster stats\nstats = es.cluster.stats()\nprint(f\"Total documents: {stats['indices']['docs']['count']}\")\nprint(f\"Total size: {stats['indices']['store']['size_in_bytes']} bytes\")\n```\n:::\n\n\n## Understanding the Response Format\n\nElasticsearch responses are JSON objects. Here's an example:\n\n::: {#09cc1628 .cell execution_count=3}\n``` {.python .cell-code}\n# Get cluster health (formatted)\nhealth = es.cluster.health()\nprint(json.dumps(health, indent=2))\n\n# Example output:\n# {\n#   \"cluster_name\": \"docker-cluster\",\n#   \"status\": \"yellow\",\n#   \"timed_out\": false,\n#   \"number_of_nodes\": 1,\n#   \"number_of_data_nodes\": 1,\n#   \"active_primary_shards\": 5,\n#   \"active_shards\": 5,\n#   \"relocating_shards\": 0,\n#   \"initializing_shards\": 0,\n#   \"unassigned_shards\": 5\n# }\n```\n:::\n\n\n## Testing Your Setup\n\nHere's a simple test to ensure everything is working:\n\n::: {#78bb4705 .cell execution_count=4}\n``` {.python .cell-code}\ndef test_elasticsearch_connection():\n    \"\"\"Test Elasticsearch connection and basic operations\"\"\"\n    try:\n        # Connect\n        es = Elasticsearch(['http://localhost:9200'])\n\n        # Check connection\n        if not es.ping():\n            return \"Failed to connect\"\n\n        # Get cluster info\n        info = es.info()\n\n        # Return summary\n        return {\n            \"status\": \"Connected\",\n            \"cluster_name\": info['cluster_name'],\n            \"version\": info['version']['number'],\n            \"lucene_version\": info['version']['lucene_version']\n        }\n\n    except Exception as e:\n        return f\"Error: {str(e)}\"\n\n# Run the test\nresult = test_elasticsearch_connection()\nprint(json.dumps(result, indent=2))\n```\n:::\n\n\n:::{.callout-tip}\n## Next Steps\nNow that you're connected, let's explore the core concepts of Elasticsearch in the next section!\n:::\n\n## Common Connection Issues\n\n### Issue: Connection Refused\n\n**Solution**: Ensure Elasticsearch is running and accessible on port 9200.\n\n```bash\n# Check if Elasticsearch is running\ncurl http://localhost:9200\n\n# Or using Python\nimport requests\nresponse = requests.get('http://localhost:9200')\nprint(response.json())\n```\n\n### Issue: Timeout Errors\n\n**Solution**: Increase the timeout in your client configuration:\n\n::: {#fa06dc39 .cell execution_count=5}\n``` {.python .cell-code}\nes = Elasticsearch(\n    ['http://localhost:9200'],\n    request_timeout=30,  # 30 seconds timeout\n    max_retries=3,\n    retry_on_timeout=True\n)\n```\n:::\n\n\n### Issue: SSL/TLS Errors\n\n**Solution**: For development with self-signed certificates:\n\n::: {#3b462d08 .cell execution_count=6}\n``` {.python .cell-code}\nes = Elasticsearch(\n    ['https://localhost:9200'],\n    verify_certs=False,  # Only for development!\n    ssl_show_warn=False\n)\n```\n:::\n\n\n:::{.callout-warning}\n## Security Warning\nNever disable certificate verification in production environments!\n:::\n\n---\n\n## Download Notebook\n\n:::{.callout-note}\n## Jupyter Notebook\nDownload this section as an interactive Jupyter notebook to run the examples on your own machine.\n\n[Download getting-started.ipynb](getting-started.ipynb){.btn .btn-primary download=\"getting-started.ipynb\"}\n:::\n\n---\njupyter:\n  kernelspec:\n    display_name: Python 3 (ipykernel)\n    language: python\n    name: python3\n    path: /opt/python/share/jupyter/kernels/python3\n  language_info:\n    codemirror_mode:\n      name: ipython\n      version: 3\n    file_extension: .py\n    mimetype: text/x-python\n    name: python\n    nbconvert_exporter: python\n    pygments_lexer: ipython3\n    version: 3.13.8\n---\n",
    "supporting": [
      "getting-started_files/figure-ipynb"
    ],
    "filters": []
  }
}