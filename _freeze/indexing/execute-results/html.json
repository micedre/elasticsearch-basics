{
  "hash": "c118e17da88a8b510261ed2781da4ba3",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"Indexing & Documents\"\nformat:\n    html: default\n    ipynb: default\n---\n\n## Creating an Index\n\nBefore adding documents, let's create an index with custom settings and mappings.\n\n::: {#d5855dd0 .cell execution_count=1}\n``` {.python .cell-code}\nfrom elasticsearch import Elasticsearch\n\nes = Elasticsearch(['http://localhost:9200'])\n\n# Define index name\nindex_name = \"blog_posts\"\n\n# Define index settings and mappings\nindex_config = {\n    \"settings\": {\n        \"number_of_shards\": 1,\n        \"number_of_replicas\": 1,\n        \"analysis\": {\n            \"analyzer\": {\n                \"custom_english\": {\n                    \"type\": \"english\",\n                    \"stopwords\": \"_english_\"\n                }\n            }\n        }\n    },\n    \"mappings\": {\n        \"properties\": {\n            \"title\": {\n                \"type\": \"text\",\n                \"analyzer\": \"custom_english\"\n            },\n            \"author\": {\n                \"type\": \"keyword\"\n            },\n            \"content\": {\n                \"type\": \"text\",\n                \"analyzer\": \"custom_english\"\n            },\n            \"published_date\": {\n                \"type\": \"date\",\n                \"format\": \"yyyy-MM-dd\"\n            },\n            \"tags\": {\n                \"type\": \"keyword\"\n            },\n            \"views\": {\n                \"type\": \"integer\"\n            }\n        }\n    }\n}\n\n# Create the index\nif not es.indices.exists(index=index_name):\n    es.indices.create(index=index_name, body=index_config)\n    print(f\"Index '{index_name}' created successfully\")\nelse:\n    print(f\"Index '{index_name}' already exists\")\n```\n:::\n\n\n## Indexing a Single Document\n\nThe most basic operation is indexing a single document.\n\n::: {#d46672e9 .cell execution_count=2}\n``` {.python .cell-code}\n# Define a document\ndocument = {\n    \"title\": \"Getting Started with Elasticsearch\",\n    \"author\": \"Jane Smith\",\n    \"content\": \"Elasticsearch is a powerful search and analytics engine built on Apache Lucene.\",\n    \"published_date\": \"2024-01-15\",\n    \"tags\": [\"elasticsearch\", \"tutorial\", \"search\"],\n    \"views\": 1250\n}\n\n# Index the document (auto-generate ID)\nresponse = es.index(\n    index=\"blog_posts\",\n    document=document\n)\n\nprint(f\"Document indexed with ID: {response['_id']}\")\nprint(f\"Result: {response['result']}\")  # 'created' or 'updated'\n```\n:::\n\n\n## Specifying Document IDs\n\nYou can specify your own document IDs:\n\n::: {#6ee76bcf .cell execution_count=3}\n``` {.python .cell-code}\n# Index with custom ID\ndocument_id = \"post_001\"\n\nresponse = es.index(\n    index=\"blog_posts\",\n    id=document_id,\n    document=document\n)\n\nprint(f\"Document indexed with ID: {response['_id']}\")\n```\n:::\n\n\n:::{.callout-note}\n## Auto vs Custom IDs\n- **Auto-generated**: Use when you don't need to reference specific documents\n- **Custom IDs**: Use when you need to update or reference specific documents\n:::\n\n## Bulk Indexing\n\nFor indexing multiple documents efficiently, use the bulk API:\n\n::: {#f80f1200 .cell execution_count=4}\n``` {.python .cell-code}\nfrom elasticsearch import helpers\n\n# Prepare multiple documents\ndocuments = [\n    {\n        \"_index\": \"blog_posts\",\n        \"_id\": \"post_002\",\n        \"_source\": {\n            \"title\": \"Advanced Elasticsearch Queries\",\n            \"author\": \"John Doe\",\n            \"content\": \"Learn how to write complex queries in Elasticsearch.\",\n            \"published_date\": \"2024-01-20\",\n            \"tags\": [\"elasticsearch\", \"advanced\", \"queries\"],\n            \"views\": 850\n        }\n    },\n    {\n        \"_index\": \"blog_posts\",\n        \"_id\": \"post_003\",\n        \"_source\": {\n            \"title\": \"Elasticsearch Performance Tuning\",\n            \"author\": \"Jane Smith\",\n            \"content\": \"Tips and tricks for optimizing Elasticsearch performance.\",\n            \"published_date\": \"2024-01-25\",\n            \"tags\": [\"elasticsearch\", \"performance\", \"optimization\"],\n            \"views\": 2100\n        }\n    },\n    {\n        \"_index\": \"blog_posts\",\n        \"_id\": \"post_004\",\n        \"_source\": {\n            \"title\": \"Elasticsearch Aggregations Guide\",\n            \"author\": \"Mike Johnson\",\n            \"content\": \"Master the art of data aggregation in Elasticsearch.\",\n            \"published_date\": \"2024-02-01\",\n            \"tags\": [\"elasticsearch\", \"aggregations\", \"analytics\"],\n            \"views\": 1750\n        }\n    }\n]\n\n# Bulk index\nsuccess, failed = helpers.bulk(es, documents)\nprint(f\"Successfully indexed: {success} documents\")\nif failed:\n    print(f\"Failed: {failed}\")\n```\n:::\n\n\n### Alternative Bulk API Format\n\n::: {#1329fc3e .cell execution_count=5}\n``` {.python .cell-code}\n# Using the bulk API directly\nbulk_body = []\n\nfor i, doc in enumerate([doc[\"_source\"] for doc in documents], start=5):\n    # Action line\n    bulk_body.append({\"index\": {\"_index\": \"blog_posts\", \"_id\": f\"post_{i:03d}\"}})\n    # Document line\n    bulk_body.append(doc)\n\n# Execute bulk request\nresponse = es.bulk(operations=bulk_body)\n\nprint(f\"Errors: {response['errors']}\")\nprint(f\"Items processed: {len(response['items'])}\")\n```\n:::\n\n\n## Retrieving Documents\n\n### Get by ID\n\n::: {#5654b105 .cell execution_count=6}\n``` {.python .cell-code}\n# Retrieve a specific document\ndoc_id = \"post_001\"\nresponse = es.get(index=\"blog_posts\", id=doc_id)\n\nprint(f\"Document ID: {response['_id']}\")\nprint(f\"Source: {response['_source']}\")\n```\n:::\n\n\n### Check if Document Exists\n\n::: {#782a395d .cell execution_count=7}\n``` {.python .cell-code}\n# Check if document exists\nexists = es.exists(index=\"blog_posts\", id=\"post_001\")\nprint(f\"Document exists: {exists}\")\n```\n:::\n\n\n## Updating Documents\n\n### Partial Update\n\n::: {#d36bc249 .cell execution_count=8}\n``` {.python .cell-code}\n# Update specific fields\nupdate_body = {\n    \"doc\": {\n        \"views\": 1300,\n        \"tags\": [\"elasticsearch\", \"tutorial\", \"search\", \"beginner\"]\n    }\n}\n\nresponse = es.update(\n    index=\"blog_posts\",\n    id=\"post_001\",\n    body=update_body\n)\n\nprint(f\"Update result: {response['result']}\")  # 'updated' or 'noop'\n```\n:::\n\n\n### Update with Script\n\n::: {#8b9aeff6 .cell execution_count=9}\n``` {.python .cell-code}\n# Increment views counter\nupdate_script = {\n    \"script\": {\n        \"source\": \"ctx._source.views += params.increment\",\n        \"params\": {\n            \"increment\": 10\n        }\n    }\n}\n\nresponse = es.update(\n    index=\"blog_posts\",\n    id=\"post_001\",\n    body=update_script\n)\n\nprint(f\"Views incremented\")\n```\n:::\n\n\n### Upsert (Update or Insert)\n\n::: {#99ed9704 .cell execution_count=10}\n``` {.python .cell-code}\n# Update if exists, insert if not\nupsert_body = {\n    \"doc\": {\n        \"views\": 100\n    },\n    \"doc_as_upsert\": True\n}\n\nresponse = es.update(\n    index=\"blog_posts\",\n    id=\"post_new\",\n    body=upsert_body\n)\n\nprint(f\"Result: {response['result']}\")\n```\n:::\n\n\n## Deleting Documents\n\n### Delete by ID\n\n::: {#d5652cab .cell execution_count=11}\n``` {.python .cell-code}\n# Delete a specific document\nresponse = es.delete(\n    index=\"blog_posts\",\n    id=\"post_004\"\n)\n\nprint(f\"Delete result: {response['result']}\")  # 'deleted'\n```\n:::\n\n\n### Delete by Query\n\n::: {#a9d4a445 .cell execution_count=12}\n``` {.python .cell-code}\n# Delete all documents matching a query\ndelete_query = {\n    \"query\": {\n        \"range\": {\n            \"views\": {\n                \"lt\": 500  # Less than 500 views\n            }\n        }\n    }\n}\n\nresponse = es.delete_by_query(\n    index=\"blog_posts\",\n    body=delete_query\n)\n\nprint(f\"Deleted {response['deleted']} documents\")\n```\n:::\n\n\n## Managing Indices\n\n### Get Index Information\n\n::: {#50954742 .cell execution_count=13}\n``` {.python .cell-code}\n# Get index settings\nsettings = es.indices.get_settings(index=\"blog_posts\")\nprint(settings)\n\n# Get index mappings\nmappings = es.indices.get_mapping(index=\"blog_posts\")\nprint(mappings)\n\n# Get index stats\nstats = es.indices.stats(index=\"blog_posts\")\nprint(f\"Document count: {stats['_all']['total']['docs']['count']}\")\nprint(f\"Store size: {stats['_all']['total']['store']['size_in_bytes']} bytes\")\n```\n:::\n\n\n### Update Index Settings\n\n::: {#eca39594 .cell execution_count=14}\n``` {.python .cell-code}\n# Update number of replicas (dynamic setting)\nes.indices.put_settings(\n    index=\"blog_posts\",\n    body={\n        \"index\": {\n            \"number_of_replicas\": 2\n        }\n    }\n)\n\nprint(\"Index settings updated\")\n```\n:::\n\n\n### Delete an Index\n\n::: {#a345ce78 .cell execution_count=15}\n``` {.python .cell-code}\n# Delete an index\nif es.indices.exists(index=\"blog_posts\"):\n    es.indices.delete(index=\"blog_posts\")\n    print(\"Index deleted\")\n```\n:::\n\n\n:::{.callout-warning}\n## Deleting Indices\nBe careful! Deleting an index removes all documents permanently.\n:::\n\n## Index Aliases\n\nAliases provide flexible ways to reference indices:\n\n::: {#d084572c .cell execution_count=16}\n``` {.python .cell-code}\n# Create an alias\nes.indices.put_alias(\n    index=\"blog_posts\",\n    name=\"blogs\"\n)\n\n# Now you can use \"blogs\" instead of \"blog_posts\"\nes.search(index=\"blogs\", body={\"query\": {\"match_all\": {}}})\n\n# Create filtered alias\nes.indices.put_alias(\n    index=\"blog_posts\",\n    name=\"popular_blogs\",\n    body={\n        \"filter\": {\n            \"range\": {\n                \"views\": {\"gte\": 1000}\n            }\n        }\n    }\n)\n```\n:::\n\n\n## Reindexing\n\nSometimes you need to copy documents from one index to another:\n\n::: {#9876307d .cell execution_count=17}\n``` {.python .cell-code}\n# Reindex from old index to new index\nreindex_body = {\n    \"source\": {\n        \"index\": \"blog_posts\"\n    },\n    \"dest\": {\n        \"index\": \"blog_posts_v2\"\n    }\n}\n\nresponse = es.reindex(body=reindex_body)\nprint(f\"Reindexed {response['total']} documents\")\n```\n:::\n\n\n## Best Practices\n\n### 1. Use Bulk API for Multiple Documents\n\n::: {#2eb2982f .cell execution_count=18}\n``` {.python .cell-code}\n# Good: Bulk indexing\nhelpers.bulk(es, documents)\n\n# Avoid: Individual indexing in a loop\nfor doc in documents:\n    es.index(index=\"blog_posts\", document=doc)  # Slower\n```\n:::\n\n\n### 2. Define Mappings Explicitly\n\n::: {#ed477975 .cell execution_count=19}\n``` {.python .cell-code}\n# Good: Explicit mapping\nes.indices.create(\n    index=\"products\",\n    body={\n        \"mappings\": {\n            \"properties\": {\n                \"name\": {\"type\": \"text\"},\n                \"price\": {\"type\": \"float\"}\n            }\n        }\n    }\n)\n\n# Avoid: Relying on dynamic mapping for production\n```\n:::\n\n\n### 3. Use Appropriate Refresh Settings\n\n::: {#d17cbf39 .cell execution_count=20}\n``` {.python .cell-code}\n# For bulk indexing, disable refresh during indexing\nes.indices.put_settings(\n    index=\"blog_posts\",\n    body={\"index\": {\"refresh_interval\": \"-1\"}}\n)\n\n# Bulk index documents\nhelpers.bulk(es, documents)\n\n# Re-enable refresh\nes.indices.put_settings(\n    index=\"blog_posts\",\n    body={\"index\": {\"refresh_interval\": \"1s\"}}\n)\n\n# Force refresh\nes.indices.refresh(index=\"blog_posts\")\n```\n:::\n\n\n## Practical Example: Complete CRUD Operations\n\n::: {#22a67583 .cell execution_count=21}\n``` {.python .cell-code}\ndef demonstrate_crud_operations():\n    \"\"\"Complete example of CRUD operations\"\"\"\n    es = Elasticsearch(['http://localhost:9200'])\n\n    index_name = \"products\"\n\n    # CREATE index\n    if not es.indices.exists(index=index_name):\n        es.indices.create(\n            index=index_name,\n            body={\n                \"mappings\": {\n                    \"properties\": {\n                        \"name\": {\"type\": \"text\"},\n                        \"price\": {\"type\": \"float\"},\n                        \"category\": {\"type\": \"keyword\"},\n                        \"in_stock\": {\"type\": \"boolean\"}\n                    }\n                }\n            }\n        )\n\n    # CREATE document\n    product = {\n        \"name\": \"Laptop\",\n        \"price\": 999.99,\n        \"category\": \"Electronics\",\n        \"in_stock\": True\n    }\n    created = es.index(index=index_name, id=\"prod_001\", document=product)\n    print(f\"Created: {created['result']}\")\n\n    # READ document\n    retrieved = es.get(index=index_name, id=\"prod_001\")\n    print(f\"Retrieved: {retrieved['_source']}\")\n\n    # UPDATE document\n    updated = es.update(\n        index=index_name,\n        id=\"prod_001\",\n        body={\"doc\": {\"price\": 899.99}}\n    )\n    print(f\"Updated: {updated['result']}\")\n\n    # DELETE document\n    deleted = es.delete(index=index_name, id=\"prod_001\")\n    print(f\"Deleted: {deleted['result']}\")\n\n    # Cleanup\n    es.indices.delete(index=index_name)\n\n# Run the example\n# demonstrate_crud_operations()\n```\n:::\n\n\n:::{.callout-tip}\n## Next Steps\nNow that you know how to manage documents and indices, let's explore how to search and query data in the next section!\n:::\n\n---\n\n## Download Notebook\n\n:::{.callout-note}\n## Jupyter Notebook\nDownload this section as an interactive Jupyter notebook to run the examples on your own machine.\n\n[Download indexing.ipynb](indexing.ipynb){.btn .btn-primary download=\"indexing.ipynb\"}\n:::\n\n",
    "supporting": [
      "indexing_files"
    ],
    "filters": [],
    "includes": {}
  }
}