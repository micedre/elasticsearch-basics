---
title: "Indexing & Documents"
format:
    html: default
    ipynb: default
---

## Creating an Index

Before adding documents, let's create an index with custom settings and mappings.

```{python}
#| echo: true
#| eval: false

from elasticsearch import Elasticsearch

es = Elasticsearch(['http://localhost:9200'])

# Define index name
index_name = "blog_posts"

# Define index settings and mappings
index_config = {
    "settings": {
        "number_of_shards": 1,
        "number_of_replicas": 1,
        "analysis": {
            "analyzer": {
                "custom_english": {
                    "type": "english",
                    "stopwords": "_english_"
                }
            }
        }
    },
    "mappings": {
        "properties": {
            "title": {
                "type": "text",
                "analyzer": "custom_english"
            },
            "author": {
                "type": "keyword"
            },
            "content": {
                "type": "text",
                "analyzer": "custom_english"
            },
            "published_date": {
                "type": "date",
                "format": "yyyy-MM-dd"
            },
            "tags": {
                "type": "keyword"
            },
            "views": {
                "type": "integer"
            }
        }
    }
}

# Create the index
if not es.indices.exists(index=index_name):
    es.indices.create(index=index_name, body=index_config)
    print(f"Index '{index_name}' created successfully")
else:
    print(f"Index '{index_name}' already exists")
```

## Indexing a Single Document

The most basic operation is indexing a single document.

```{python}
#| echo: true
#| eval: false

# Define a document
document = {
    "title": "Getting Started with Elasticsearch",
    "author": "Jane Smith",
    "content": "Elasticsearch is a powerful search and analytics engine built on Apache Lucene.",
    "published_date": "2024-01-15",
    "tags": ["elasticsearch", "tutorial", "search"],
    "views": 1250
}

# Index the document (auto-generate ID)
response = es.index(
    index="blog_posts",
    document=document
)

print(f"Document indexed with ID: {response['_id']}")
print(f"Result: {response['result']}")  # 'created' or 'updated'
```

## Specifying Document IDs

You can specify your own document IDs:

```{python}
#| echo: true
#| eval: false

# Index with custom ID
document_id = "post_001"

response = es.index(
    index="blog_posts",
    id=document_id,
    document=document
)

print(f"Document indexed with ID: {response['_id']}")
```

:::{.callout-note}
## Auto vs Custom IDs
- **Auto-generated**: Use when you don't need to reference specific documents
- **Custom IDs**: Use when you need to update or reference specific documents
:::

## Bulk Indexing

For indexing multiple documents efficiently, use the bulk API:

```{python}
#| echo: true
#| eval: false

from elasticsearch import helpers

# Prepare multiple documents
documents = [
    {
        "_index": "blog_posts",
        "_id": "post_002",
        "_source": {
            "title": "Advanced Elasticsearch Queries",
            "author": "John Doe",
            "content": "Learn how to write complex queries in Elasticsearch.",
            "published_date": "2024-01-20",
            "tags": ["elasticsearch", "advanced", "queries"],
            "views": 850
        }
    },
    {
        "_index": "blog_posts",
        "_id": "post_003",
        "_source": {
            "title": "Elasticsearch Performance Tuning",
            "author": "Jane Smith",
            "content": "Tips and tricks for optimizing Elasticsearch performance.",
            "published_date": "2024-01-25",
            "tags": ["elasticsearch", "performance", "optimization"],
            "views": 2100
        }
    },
    {
        "_index": "blog_posts",
        "_id": "post_004",
        "_source": {
            "title": "Elasticsearch Aggregations Guide",
            "author": "Mike Johnson",
            "content": "Master the art of data aggregation in Elasticsearch.",
            "published_date": "2024-02-01",
            "tags": ["elasticsearch", "aggregations", "analytics"],
            "views": 1750
        }
    }
]

# Bulk index
success, failed = helpers.bulk(es, documents)
print(f"Successfully indexed: {success} documents")
if failed:
    print(f"Failed: {failed}")
```

### Alternative Bulk API Format

```{python}
#| echo: true
#| eval: false

# Using the bulk API directly
bulk_body = []

for i, doc in enumerate([doc["_source"] for doc in documents], start=5):
    # Action line
    bulk_body.append({"index": {"_index": "blog_posts", "_id": f"post_{i:03d}"}})
    # Document line
    bulk_body.append(doc)

# Execute bulk request
response = es.bulk(operations=bulk_body)

print(f"Errors: {response['errors']}")
print(f"Items processed: {len(response['items'])}")
```

## Retrieving Documents

### Get by ID

```{python}
#| echo: true
#| eval: false

# Retrieve a specific document
doc_id = "post_001"
response = es.get(index="blog_posts", id=doc_id)

print(f"Document ID: {response['_id']}")
print(f"Source: {response['_source']}")
```

### Check if Document Exists

```{python}
#| echo: true
#| eval: false

# Check if document exists
exists = es.exists(index="blog_posts", id="post_001")
print(f"Document exists: {exists}")
```

## Updating Documents

### Partial Update

```{python}
#| echo: true
#| eval: false

# Update specific fields
update_body = {
    "doc": {
        "views": 1300,
        "tags": ["elasticsearch", "tutorial", "search", "beginner"]
    }
}

response = es.update(
    index="blog_posts",
    id="post_001",
    body=update_body
)

print(f"Update result: {response['result']}")  # 'updated' or 'noop'
```

### Update with Script

```{python}
#| echo: true
#| eval: false

# Increment views counter
update_script = {
    "script": {
        "source": "ctx._source.views += params.increment",
        "params": {
            "increment": 10
        }
    }
}

response = es.update(
    index="blog_posts",
    id="post_001",
    body=update_script
)

print(f"Views incremented")
```

### Upsert (Update or Insert)

```{python}
#| echo: true
#| eval: false

# Update if exists, insert if not
upsert_body = {
    "doc": {
        "views": 100
    },
    "doc_as_upsert": True
}

response = es.update(
    index="blog_posts",
    id="post_new",
    body=upsert_body
)

print(f"Result: {response['result']}")
```

## Deleting Documents

### Delete by ID

```{python}
#| echo: true
#| eval: false

# Delete a specific document
response = es.delete(
    index="blog_posts",
    id="post_004"
)

print(f"Delete result: {response['result']}")  # 'deleted'
```

### Delete by Query

```{python}
#| echo: true
#| eval: false

# Delete all documents matching a query
delete_query = {
    "query": {
        "range": {
            "views": {
                "lt": 500  # Less than 500 views
            }
        }
    }
}

response = es.delete_by_query(
    index="blog_posts",
    body=delete_query
)

print(f"Deleted {response['deleted']} documents")
```

## Managing Indices

### Get Index Information

```{python}
#| echo: true
#| eval: false

# Get index settings
settings = es.indices.get_settings(index="blog_posts")
print(settings)

# Get index mappings
mappings = es.indices.get_mapping(index="blog_posts")
print(mappings)

# Get index stats
stats = es.indices.stats(index="blog_posts")
print(f"Document count: {stats['_all']['total']['docs']['count']}")
print(f"Store size: {stats['_all']['total']['store']['size_in_bytes']} bytes")
```

### Update Index Settings

```{python}
#| echo: true
#| eval: false

# Update number of replicas (dynamic setting)
es.indices.put_settings(
    index="blog_posts",
    body={
        "index": {
            "number_of_replicas": 2
        }
    }
)

print("Index settings updated")
```

### Delete an Index

```{python}
#| echo: true
#| eval: false

# Delete an index
if es.indices.exists(index="blog_posts"):
    es.indices.delete(index="blog_posts")
    print("Index deleted")
```

:::{.callout-warning}
## Deleting Indices
Be careful! Deleting an index removes all documents permanently.
:::

## Index Aliases

Aliases provide flexible ways to reference indices:

```{python}
#| echo: true
#| eval: false

# Create an alias
es.indices.put_alias(
    index="blog_posts",
    name="blogs"
)

# Now you can use "blogs" instead of "blog_posts"
es.search(index="blogs", body={"query": {"match_all": {}}})

# Create filtered alias
es.indices.put_alias(
    index="blog_posts",
    name="popular_blogs",
    body={
        "filter": {
            "range": {
                "views": {"gte": 1000}
            }
        }
    }
)
```

## Reindexing

Sometimes you need to copy documents from one index to another:

```{python}
#| echo: true
#| eval: false

# Reindex from old index to new index
reindex_body = {
    "source": {
        "index": "blog_posts"
    },
    "dest": {
        "index": "blog_posts_v2"
    }
}

response = es.reindex(body=reindex_body)
print(f"Reindexed {response['total']} documents")
```

## Best Practices

### 1. Use Bulk API for Multiple Documents

```{python}
#| echo: true
#| eval: false

# Good: Bulk indexing
helpers.bulk(es, documents)

# Avoid: Individual indexing in a loop
for doc in documents:
    es.index(index="blog_posts", document=doc)  # Slower
```

### 2. Define Mappings Explicitly

```{python}
#| echo: true
#| eval: false

# Good: Explicit mapping
es.indices.create(
    index="products",
    body={
        "mappings": {
            "properties": {
                "name": {"type": "text"},
                "price": {"type": "float"}
            }
        }
    }
)

# Avoid: Relying on dynamic mapping for production
```

### 3. Use Appropriate Refresh Settings

```{python}
#| echo: true
#| eval: false

# For bulk indexing, disable refresh during indexing
es.indices.put_settings(
    index="blog_posts",
    body={"index": {"refresh_interval": "-1"}}
)

# Bulk index documents
helpers.bulk(es, documents)

# Re-enable refresh
es.indices.put_settings(
    index="blog_posts",
    body={"index": {"refresh_interval": "1s"}}
)

# Force refresh
es.indices.refresh(index="blog_posts")
```

## Practical Example: Complete CRUD Operations

```{python}
#| echo: true
#| eval: false

def demonstrate_crud_operations():
    """Complete example of CRUD operations"""
    es = Elasticsearch(['http://localhost:9200'])

    index_name = "products"

    # CREATE index
    if not es.indices.exists(index=index_name):
        es.indices.create(
            index=index_name,
            body={
                "mappings": {
                    "properties": {
                        "name": {"type": "text"},
                        "price": {"type": "float"},
                        "category": {"type": "keyword"},
                        "in_stock": {"type": "boolean"}
                    }
                }
            }
        )

    # CREATE document
    product = {
        "name": "Laptop",
        "price": 999.99,
        "category": "Electronics",
        "in_stock": True
    }
    created = es.index(index=index_name, id="prod_001", document=product)
    print(f"Created: {created['result']}")

    # READ document
    retrieved = es.get(index=index_name, id="prod_001")
    print(f"Retrieved: {retrieved['_source']}")

    # UPDATE document
    updated = es.update(
        index=index_name,
        id="prod_001",
        body={"doc": {"price": 899.99}}
    )
    print(f"Updated: {updated['result']}")

    # DELETE document
    deleted = es.delete(index=index_name, id="prod_001")
    print(f"Deleted: {deleted['result']}")

    # Cleanup
    es.indices.delete(index=index_name)

# Run the example
# demonstrate_crud_operations()
```

:::{.callout-tip}
## Next Steps
Now that you know how to manage documents and indices, let's explore how to search and query data in the next section!
:::

---

## Download Notebook

:::{.callout-note}
## Jupyter Notebook
Download this section as an interactive Jupyter notebook to run the examples on your own machine.

[Download indexing.ipynb](indexing.ipynb){.btn .btn-primary download="indexing.ipynb"}
:::
