---
title: "Démarrage avec Elasticsearch"
format:
    html: default
    ipynb: default
---

## Options d'installation

Il existe plusieurs façons de configurer et d'exécuter Elasticsearch :

### Option 1 : Docker (recommandé pour le développement)

La façon la plus simple de commencer est d'utiliser Docker :

```bash
# Pull the Elasticsearch image
docker pull docker.elastic.co/elasticsearch/elasticsearch:8.11.0

# Run Elasticsearch
docker run -d \
  --name elasticsearch \
  -p 9200:9200 \
  -p 9300:9300 \
  -e "discovery.type=single-node" \
  -e "xpack.security.enabled=false" \
  docker.elastic.co/elasticsearch/elasticsearch:8.11.0
```

### Option 2 : Elastic Cloud

Elastic propose une solution cloud hébergée sur [cloud.elastic.co](https://cloud.elastic.co) avec un essai gratuit.

### Option 3 : Installation locale

Téléchargez et installez depuis [elastic.co/downloads/elasticsearch](https://www.elastic.co/downloads/elasticsearch).

:::{.callout-note}
## Note de sécurité
Pour les environnements de production, activez toujours les fonctionnalités de sécurité. Les exemples ici désactivent la sécurité pour des raisons de simplicité.
:::

## Connexion à Elasticsearch

Vérifions notre connexion à Elasticsearch :

```{python}
#| echo: true
#| eval: false
from elasticsearch import Elasticsearch
import json

# Create an Elasticsearch client
es = Elasticsearch(
    ['http://localhost:9200'],
    # For Elastic Cloud, use:
    # cloud_id="your-cloud-id",
    # api_key=("your-api-key-id", "your-api-key")
)

# Test the connection
if es.ping():
    print("Connected to Elasticsearch!")

    # Get cluster info
    info = es.info()
    print(f"Cluster name: {info['cluster_name']}")
    print(f"Version: {info['version']['number']}")
else:
    print("Could not connect to Elasticsearch")
```

:::{.callout-tip}
## Prochaines étapes
Maintenant que vous êtes connecté, explorons les concepts et l'architecture d'Elasticsearch pour comprendre son fonctionnement !
:::

## Problèmes de connexion courants

### Problème : Connexion refusée

**Solution** : Assurez-vous qu'Elasticsearch est en cours d'exécution et accessible sur le port 9200.

```bash
# Check if Elasticsearch is running
curl http://localhost:9200

# Or using Python
import requests
response = requests.get('http://localhost:9200')
print(response.json())
```

### Problème : Erreurs de timeout

**Solution** : Augmentez le timeout dans la configuration de votre client :

```{python}
#| echo: true
#| eval: false

es = Elasticsearch(
    ['http://localhost:9200'],
    request_timeout=30,  # 30 seconds timeout
    max_retries=3,
    retry_on_timeout=True
)
```

### Problème : Erreurs SSL/TLS

**Solution** : Pour le développement avec des certificats auto-signés :

```{python}
#| echo: true
#| eval: false

es = Elasticsearch(
    ['https://localhost:9200'],
    verify_certs=False,  # Only for development!
    ssl_show_warn=False
)
```

:::{.callout-warning}
## Avertissement de sécurité
Ne désactivez jamais la vérification des certificats dans les environnements de production !
:::

---

## Télécharger le notebook

:::{.callout-note}
## Jupyter Notebook
Téléchargez cette section sous forme de notebook Jupyter interactif pour exécuter les exemples sur votre propre machine.

[Télécharger getting-started.ipynb](getting-started.ipynb){.btn .btn-primary download="getting-started.ipynb"}
:::
