---
title: "Indexation & Documents"
format:
    html: default
    ipynb: default
---

## Création d'un Index

Avant d'ajouter des documents, créons un index avec des paramètres et des mappings personnalisés.

```{python}
#| echo: true
#| eval: false

from elasticsearch import Elasticsearch

es = Elasticsearch(['http://localhost:9200'])

# Définir le nom de l'index
index_name = "blog_posts"

# Définir les paramètres et mappings de l'index
index_config = {
    "settings": {
        "number_of_shards": 1,
        "number_of_replicas": 1,
        "analysis": {
            "analyzer": {
                "custom_english": {
                    "type": "english",
                    "stopwords": "_english_"
                }
            }
        }
    },
    "mappings": {
        "properties": {
            "title": {
                "type": "text",
                "analyzer": "custom_english"
            },
            "author": {
                "type": "keyword"
            },
            "content": {
                "type": "text",
                "analyzer": "custom_english"
            },
            "published_date": {
                "type": "date",
                "format": "yyyy-MM-dd"
            },
            "tags": {
                "type": "keyword"
            },
            "views": {
                "type": "integer"
            }
        }
    }
}

# Créer l'index
if not es.indices.exists(index=index_name):
    es.indices.create(index=index_name, body=index_config)
    print(f"Index '{index_name}' créé avec succès")
else:
    print(f"L'index '{index_name}' existe déjà")
```

## Indexation d'un Document Simple

L'opération la plus basique consiste à indexer un seul document.

```{python}
#| echo: true
#| eval: false

# Définir un document
document = {
    "title": "Démarrage avec Elasticsearch",
    "author": "Jane Smith",
    "content": "Elasticsearch est un moteur de recherche et d'analyse puissant construit sur Apache Lucene.",
    "published_date": "2024-01-15",
    "tags": ["elasticsearch", "tutoriel", "recherche"],
    "views": 1250
}

# Indexer le document (génération automatique de l'ID)
response = es.index(
    index="blog_posts",
    document=document
)

print(f"Document indexé avec l'ID : {response['_id']}")
print(f"Résultat : {response['result']}")  # 'created' ou 'updated'
```

## Spécification des IDs de Documents

Vous pouvez spécifier vos propres IDs de documents :

```{python}
#| echo: true
#| eval: false

# Indexer avec un ID personnalisé
document_id = "post_001"

response = es.index(
    index="blog_posts",
    id=document_id,
    document=document
)

print(f"Document indexé avec l'ID : {response['_id']}")
```

:::{.callout-note}
## IDs Auto vs Personnalisés
- **Auto-générés** : À utiliser lorsque vous n'avez pas besoin de référencer des documents spécifiques
- **IDs personnalisés** : À utiliser lorsque vous devez mettre à jour ou référencer des documents spécifiques
:::

## Indexation en Masse

Pour indexer plusieurs documents efficacement, utilisez l'API bulk :

```{python}
#| echo: true
#| eval: false

from elasticsearch import helpers

# Préparer plusieurs documents
documents = [
    {
        "_index": "blog_posts",
        "_id": "post_002",
        "_source": {
            "title": "Requêtes Avancées Elasticsearch",
            "author": "John Doe",
            "content": "Apprenez à écrire des requêtes complexes dans Elasticsearch.",
            "published_date": "2024-01-20",
            "tags": ["elasticsearch", "avancé", "requêtes"],
            "views": 850
        }
    },
    {
        "_index": "blog_posts",
        "_id": "post_003",
        "_source": {
            "title": "Optimisation des Performances Elasticsearch",
            "author": "Jane Smith",
            "content": "Astuces et conseils pour optimiser les performances d'Elasticsearch.",
            "published_date": "2024-01-25",
            "tags": ["elasticsearch", "performance", "optimisation"],
            "views": 2100
        }
    },
    {
        "_index": "blog_posts",
        "_id": "post_004",
        "_source": {
            "title": "Guide des Agrégations Elasticsearch",
            "author": "Mike Johnson",
            "content": "Maîtrisez l'art de l'agrégation de données dans Elasticsearch.",
            "published_date": "2024-02-01",
            "tags": ["elasticsearch", "agrégations", "analytique"],
            "views": 1750
        }
    }
]

# Indexation en masse
success, failed = helpers.bulk(es, documents)
print(f"Documents indexés avec succès : {success}")
if failed:
    print(f"Échecs : {failed}")
```

### Format Alternatif de l'API Bulk

```{python}
#| echo: true
#| eval: false

# Utilisation directe de l'API bulk
bulk_body = []

for i, doc in enumerate([doc["_source"] for doc in documents], start=5):
    # Ligne d'action
    bulk_body.append({"index": {"_index": "blog_posts", "_id": f"post_{i:03d}"}})
    # Ligne de document
    bulk_body.append(doc)

# Exécuter la requête bulk
response = es.bulk(operations=bulk_body)

print(f"Erreurs : {response['errors']}")
print(f"Éléments traités : {len(response['items'])}")
```

## Récupération de Documents

### Obtenir par ID

```{python}
#| echo: true
#| eval: false

# Récupérer un document spécifique
doc_id = "post_001"
response = es.get(index="blog_posts", id=doc_id)

print(f"ID du document : {response['_id']}")
print(f"Source : {response['_source']}")
```

### Vérifier si un Document Existe

```{python}
#| echo: true
#| eval: false

# Vérifier si le document existe
exists = es.exists(index="blog_posts", id="post_001")
print(f"Le document existe : {exists}")
```

## Mise à Jour de Documents

### Mise à Jour Partielle

```{python}
#| echo: true
#| eval: false

# Mettre à jour des champs spécifiques
update_body = {
    "doc": {
        "views": 1300,
        "tags": ["elasticsearch", "tutoriel", "recherche", "débutant"]
    }
}

response = es.update(
    index="blog_posts",
    id="post_001",
    body=update_body
)

print(f"Résultat de la mise à jour : {response['result']}")  # 'updated' ou 'noop'
```

### Mise à Jour avec Script

```{python}
#| echo: true
#| eval: false

# Incrémenter le compteur de vues
update_script = {
    "script": {
        "source": "ctx._source.views += params.increment",
        "params": {
            "increment": 10
        }
    }
}

response = es.update(
    index="blog_posts",
    id="post_001",
    body=update_script
)

print(f"Vues incrémentées")
```

### Upsert (Mise à Jour ou Insertion)

```{python}
#| echo: true
#| eval: false

# Mettre à jour si existe, insérer sinon
upsert_body = {
    "doc": {
        "views": 100
    },
    "doc_as_upsert": True
}

response = es.update(
    index="blog_posts",
    id="post_new",
    body=upsert_body
)

print(f"Résultat : {response['result']}")
```

## Suppression de Documents

### Suppression par ID

```{python}
#| echo: true
#| eval: false

# Supprimer un document spécifique
response = es.delete(
    index="blog_posts",
    id="post_004"
)

print(f"Résultat de la suppression : {response['result']}")  # 'deleted'
```

### Suppression par Requête

```{python}
#| echo: true
#| eval: false

# Supprimer tous les documents correspondant à une requête
delete_query = {
    "query": {
        "range": {
            "views": {
                "lt": 500  # Moins de 500 vues
            }
        }
    }
}

response = es.delete_by_query(
    index="blog_posts",
    body=delete_query
)

print(f"{response['deleted']} documents supprimés")
```

## Gestion des Index

### Obtenir les Informations d'un Index

```{python}
#| echo: true
#| eval: false

# Obtenir les paramètres de l'index
settings = es.indices.get_settings(index="blog_posts")
print(settings)

# Obtenir les mappings de l'index
mappings = es.indices.get_mapping(index="blog_posts")
print(mappings)

# Obtenir les statistiques de l'index
stats = es.indices.stats(index="blog_posts")
print(f"Nombre de documents : {stats['_all']['total']['docs']['count']}")
print(f"Taille de stockage : {stats['_all']['total']['store']['size_in_bytes']} octets")
```

### Mettre à Jour les Paramètres d'un Index

```{python}
#| echo: true
#| eval: false

# Mettre à jour le nombre de répliques (paramètre dynamique)
es.indices.put_settings(
    index="blog_posts",
    body={
        "index": {
            "number_of_replicas": 2
        }
    }
)

print("Paramètres de l'index mis à jour")
```

### Supprimer un Index

```{python}
#| echo: true
#| eval: false

# Supprimer un index
if es.indices.exists(index="blog_posts"):
    es.indices.delete(index="blog_posts")
    print("Index supprimé")
```

:::{.callout-warning}
## Suppression d'Index
Attention ! La suppression d'un index supprime tous les documents de manière permanente.
:::

## Alias d'Index

Les alias fournissent des moyens flexibles de référencer des index :

```{python}
#| echo: true
#| eval: false

# Créer un alias
es.indices.put_alias(
    index="blog_posts",
    name="blogs"
)

# Vous pouvez maintenant utiliser "blogs" au lieu de "blog_posts"
es.search(index="blogs", body={"query": {"match_all": {}}})

# Créer un alias filtré
es.indices.put_alias(
    index="blog_posts",
    name="popular_blogs",
    body={
        "filter": {
            "range": {
                "views": {"gte": 1000}
            }
        }
    }
)
```

## Réindexation

Parfois, vous devez copier des documents d'un index à un autre :

```{python}
#| echo: true
#| eval: false

# Réindexer depuis l'ancien index vers le nouvel index
reindex_body = {
    "source": {
        "index": "blog_posts"
    },
    "dest": {
        "index": "blog_posts_v2"
    }
}

response = es.reindex(body=reindex_body)
print(f"{response['total']} documents réindexés")
```

## Meilleures Pratiques

### 1. Utiliser l'API Bulk pour Plusieurs Documents

```{python}
#| echo: true
#| eval: false

# Bien : Indexation en masse
helpers.bulk(es, documents)

# À éviter : Indexation individuelle dans une boucle
for doc in documents:
    es.index(index="blog_posts", document=doc)  # Plus lent
```

### 2. Définir les Mappings de Manière Explicite

```{python}
#| echo: true
#| eval: false

# Bien : Mapping explicite
es.indices.create(
    index="products",
    body={
        "mappings": {
            "properties": {
                "name": {"type": "text"},
                "price": {"type": "float"}
            }
        }
    }
)

# À éviter : Se fier au mapping dynamique en production
```

### 3. Utiliser les Paramètres de Rafraîchissement Appropriés

```{python}
#| echo: true
#| eval: false

# Pour l'indexation en masse, désactiver le rafraîchissement pendant l'indexation
es.indices.put_settings(
    index="blog_posts",
    body={"index": {"refresh_interval": "-1"}}
)

# Indexer les documents en masse
helpers.bulk(es, documents)

# Réactiver le rafraîchissement
es.indices.put_settings(
    index="blog_posts",
    body={"index": {"refresh_interval": "1s"}}
)

# Forcer le rafraîchissement
es.indices.refresh(index="blog_posts")
```

## Exemple Pratique : Opérations CRUD Complètes

```{python}
#| echo: true
#| eval: false

def demonstrate_crud_operations():
    """Exemple complet d'opérations CRUD"""
    es = Elasticsearch(['http://localhost:9200'])

    index_name = "products"

    # CRÉER un index
    if not es.indices.exists(index=index_name):
        es.indices.create(
            index=index_name,
            body={
                "mappings": {
                    "properties": {
                        "name": {"type": "text"},
                        "price": {"type": "float"},
                        "category": {"type": "keyword"},
                        "in_stock": {"type": "boolean"}
                    }
                }
            }
        )

    # CRÉER un document
    product = {
        "name": "Ordinateur portable",
        "price": 999.99,
        "category": "Électronique",
        "in_stock": True
    }
    created = es.index(index=index_name, id="prod_001", document=product)
    print(f"Créé : {created['result']}")

    # LIRE un document
    retrieved = es.get(index=index_name, id="prod_001")
    print(f"Récupéré : {retrieved['_source']}")

    # METTRE À JOUR un document
    updated = es.update(
        index=index_name,
        id="prod_001",
        body={"doc": {"price": 899.99}}
    )
    print(f"Mis à jour : {updated['result']}")

    # SUPPRIMER un document
    deleted = es.delete(index=index_name, id="prod_001")
    print(f"Supprimé : {deleted['result']}")

    # Nettoyage
    es.indices.delete(index=index_name)

# Exécuter l'exemple
# demonstrate_crud_operations()
```

:::{.callout-tip}
## Prochaines Étapes
Maintenant que vous savez comment gérer les documents et les index, explorons comment rechercher et interroger les données dans la section suivante !
:::

---

## Télécharger le Notebook

:::{.callout-note}
## Notebook Jupyter
Téléchargez cette section sous forme de notebook Jupyter interactif pour exécuter les exemples sur votre propre machine.

[Télécharger indexing.ipynb](indexing.ipynb){.btn .btn-primary download="indexing.ipynb"}
:::
